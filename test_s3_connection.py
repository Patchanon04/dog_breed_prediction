#!/usr/bin/env python3
"""
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ AWS S3
"""
import os
import sys

# ‡πÄ‡∏û‡∏¥‡πà‡∏° Django settings
sys.path.insert(0, '/app')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

import django
django.setup()

from django.conf import settings
import boto3
from botocore.exceptions import ClientError, NoCredentialsError

def test_s3_connection():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ S3"""
    
    print("=" * 60)
    print("üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ AWS S3")
    print("=" * 60)
    
    # 1. ‡πÄ‡∏ä‡πá‡∏Ñ settings
    print(f"\nüìã ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:")
    print(f"   USE_S3: {settings.USE_S3}")
    
    if not settings.USE_S3:
        print("\n‚ùå S3 ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
        print("   ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô USE_S3=True ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env")
        return False
    
    print(f"   Bucket: {settings.AWS_STORAGE_BUCKET_NAME}")
    print(f"   Region: {settings.AWS_S3_REGION_NAME}")
    print(f"   Access Key: {settings.AWS_ACCESS_KEY_ID[:10]}..." if settings.AWS_ACCESS_KEY_ID else "   Access Key: ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ")
    
    # 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö credentials
    if not settings.AWS_ACCESS_KEY_ID or not settings.AWS_SECRET_ACCESS_KEY:
        print("\n‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö AWS credentials!")
        print("   ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏™‡πà AWS_ACCESS_KEY_ID ‡πÅ‡∏•‡∏∞ AWS_SECRET_ACCESS_KEY ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env")
        return False
    
    # 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ S3
    print(f"\nüîå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...")
    try:
        s3_client = boto3.client(
            's3',
            aws_access_key_id=settings.AWS_ACCESS_KEY_ID,
            aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,
            region_name=settings.AWS_S3_REGION_NAME
        )
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö list buckets
        response = s3_client.list_buckets()
        
        print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ AWS ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        print(f"\nüì¶ Buckets ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà:")
        for bucket in response['Buckets']:
            indicator = "üëâ" if bucket['Name'] == settings.AWS_STORAGE_BUCKET_NAME else "  "
            print(f"   {indicator} {bucket['Name']}")
        
        # 4. ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ bucket ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        bucket_exists = any(b['Name'] == settings.AWS_STORAGE_BUCKET_NAME for b in response['Buckets'])
        
        if bucket_exists:
            print(f"\n‚úÖ Bucket '{settings.AWS_STORAGE_BUCKET_NAME}' ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö permissions
            try:
                s3_client.head_bucket(Bucket=settings.AWS_STORAGE_BUCKET_NAME)
                print(f"‚úÖ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á bucket ‡πÑ‡∏î‡πâ")
                
                # ‡∏•‡∏≠‡∏á list objects
                try:
                    objects = s3_client.list_objects_v2(
                        Bucket=settings.AWS_STORAGE_BUCKET_NAME,
                        MaxKeys=5
                    )
                    
                    if 'Contents' in objects:
                        print(f"‚úÖ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô bucket ‡πÑ‡∏î‡πâ")
                        print(f"   ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {len(objects['Contents'])} ‡πÑ‡∏ü‡∏•‡πå")
                    else:
                        print(f"‚úÖ Bucket ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ (‡∏õ‡∏Å‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å)")
                    
                    print(f"\nüéâ ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
                    return True
                    
                except ClientError as e:
                    print(f"‚ö†Ô∏è  ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á bucket ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô permissions: {e}")
                    return False
                    
            except ClientError as e:
                error_code = e.response['Error']['Code']
                if error_code == '403':
                    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á bucket!")
                    print(f"   ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IAM permissions")
                else:
                    print(f"‚ùå Error: {e}")
                return False
        else:
            print(f"\n‚ùå Bucket '{settings.AWS_STORAGE_BUCKET_NAME}' ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà!")
            print(f"   ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏™‡∏£‡πâ‡∏≤‡∏á bucket ‡∏ä‡∏∑‡πà‡∏≠ '{settings.AWS_STORAGE_BUCKET_NAME}' ‡πÉ‡∏ô AWS Console")
            return False
            
    except NoCredentialsError:
        print("‚ùå AWS credentials ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!")
        print("   ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö AWS_ACCESS_KEY_ID ‡πÅ‡∏•‡∏∞ AWS_SECRET_ACCESS_KEY")
        return False
        
    except ClientError as e:
        error_code = e.response['Error']['Code']
        if error_code == 'InvalidAccessKeyId':
            print("‚ùå AWS Access Key ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!")
        elif error_code == 'SignatureDoesNotMatch':
            print("‚ùå AWS Secret Access Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!")
        else:
            print(f"‚ùå Error: {e}")
        return False
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

if __name__ == "__main__":
    success = test_s3_connection()
    print("\n" + "=" * 60)
    sys.exit(0 if success else 1)
